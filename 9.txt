#include<stdio.h>
#include<stdlib.h> 
struct BST
{
    int data;
    struct BST *lchild;
    struct BST *rchild;
};
typedef struct BST * NODE;
NODE createNode(int value) {
    NODE newNode = (NODE)malloc(sizeof(struct BST));
    if (newNode == NULL) {
        printf("\nMemory allocation failed");
        exit(1);
    }
    newNode->data = value;
    newNode->lchild = NULL;
    newNode->rchild = NULL;
    return newNode;
}
void insert(NODE root, int value) {
    if (value < root->data) {
        if (root->lchild == NULL)
            root->lchild = createNode(value);
        else
            insert(root->lchild, value);
    } else if (value > root->data) {
        if (root->rchild == NULL)
            root->rchild = createNode(value);
        else
            insert(root->rchild, value);
    }
}
void inorder(NODE root) {
    if(root != NULL) {
        inorder(root->lchild);
        printf("%d ", root->data);
        inorder(root->rchild);
    }
}
void preorder(NODE root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->lchild);
        preorder(root->rchild);
    }
}
void postorder(NODE root) {
    if (root != NULL) {
        postorder(root->lchild);
        postorder(root->rchild);
        printf("%d ", root->data);
    }
}
void main() {
    int ch,n,i, value;
    NODE root = NULL;
    while(1) {
        printf("\n~~~~BST MENU~~~~");
        printf("\n1. Create a BST");
        printf("\n2. Display BST Traversals");
        printf("\n3. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &ch);
        switch(ch) {
            case 1:
                printf("\nEnter the number of elements: ");
                scanf("%d", &n);
                printf("\nEnter the elements: ");
                for( i = 0; i < n; i++) {
                    scanf("%d", &value);
                    if (root == NULL)
                        root = createNode(value);
                    else
                        insert(root, value);
                }
                break;
            case 2:
                if (root == NULL)
                    printf("\nTree Is Not Created");
                else {
                    printf("\nThe Preorder display : ");
                    preorder(root);
                    printf("\nThe Inorder display : ");
                    inorder(root);
                    printf("\nThe Postorder display : ");
                    postorder(root);
                }
                break;
            case 3:
                exit(0);
            default:
                printf("\nInvalid choice.");
        }
    }
}