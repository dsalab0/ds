#include<stdio.h>
char infix[30], postfix[30], stack[30];
int top = -1;
void evaluate();
void push(char);
char pop();
int prec(char);
int main() {
    printf("\nEnter the valid infix expression: ");
    scanf("%s", infix);
    evaluate();
    printf("\nThe entered infix expression is:\n%s\n", infix);
    printf("\nThe corresponding postfix expression is:\n%s\n", postfix);
    return 0;
}
void evaluate() {
    int i = 0, j = 0;
    char symb, temp;
    push('#');
    while (infix[i] != '\0') {
        symb = infix[i];
        switch (symb) {
            case '(':
                push(symb);
                break;
            case ')':
                temp = pop();
                while (temp != '(') {
                    postfix[j++] = temp;
                    temp = pop();
                }
                break;
            case '+':
            case '-':
            case '*':
            case '/':
            case '%':
            case '^':
                while (prec(stack[top]) >= prec(symb)) {
                    temp = pop();
                    postfix[j++] = temp;
                }
                push(symb);
                break;
            default:
                postfix[j++] = symb;
        }
        i++;
    }
    while (top > 0) {
        temp = pop();
        postfix[j++] = temp;
    }
    postfix[j] = '\0';
}
void push(char item) {
    stack[++top] = item;
}
char pop() {
    return stack[top--];
}
int prec(char symb) {
    switch (symb) {
        case '#': return -1;
        case '(':
        case ')': return 0;
        case '+':
        case '-': return 1;
        case '*':
        case '/':
        case '%': return 2;
        case '^': return 3;
        default: return -1;
    }
}